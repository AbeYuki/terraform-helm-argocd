name: Terraform Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: "ap-northeast-1"
  TF_VERSION: "1.5.0"

jobs:
  terraform:
    runs-on: [self-hosted, kubernetes]
    container:
      image: hashicorp/terraform:latest
    steps:
      - name: Install git
        run: apk add --no-cache git

      - name: Clone repository
        run: git clone https://github.com/${{ github.repository }} .

      - name: Install Terraform
        run: |
          T_VERSION=${{ env.TF_VERSION }}
          wget https://releases.hashicorp.com/terraform/${T_VERSION}/terraform_${T_VERSION}_linux_arm64.zip
          unzip terraform_${T_VERSION}_linux_arm64.zip
          mv terraform /usr/local/bin/
        env:
          TF_VERSION: "1.5.0"

      - name: Detect modified directory
        run: |
          if git diff --name-only HEAD^ | grep -q '^production/'; then echo "TF_WORKDIR=production" >> $GITHUB_ENV; fi
          if git diff --name-only HEAD^ | grep -q '^staging/'; then echo "TF_WORKDIR=staging" >> $GITHUB_ENV; fi
          if git diff --name-only HEAD^ | grep -q '^testing/'; then echo "TF_WORKDIR=testing" >> $GITHUB_ENV; fi

      - name: Check Terraform format
        run: terraform fmt -check -recursive
        working-directory: ${{ env.TF_WORKDIR }}

      - name: Initialize Terraform
        run: terraform init
        working-directory: ${{ env.TF_WORKDIR }}

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ${{ env.TF_WORKDIR }}

      - name: Upload Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: ${{ env.TF_WORKDIR }}/tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve ${{ env.TF_WORKDIR }}/tfplan
        working-directory: ${{ env.TF_WORKDIR }}
